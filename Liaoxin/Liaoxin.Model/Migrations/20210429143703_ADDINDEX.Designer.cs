// <auto-generated />
using System;
using Liaoxin.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Liaoxin.Model.Migrations
{
    [DbContext(typeof(LiaoxinContext))]
    [Migration("20210429143703_ADDINDEX")]
    partial class ADDINDEX
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Liaoxin.Model.ActivityAnnouncement", b =>
                {
                    b.Property<int>("ActivityAnnouncementId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffixId");

                    b.Property<DateTime>("BeginTime");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ActivityAnnouncementId");

                    b.HasIndex("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ActivityAnnouncements");
                });

            modelBuilder.Entity("Liaoxin.Model.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<DateTime>("ShowOpenTime");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Liaoxin.Model.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("Level");

                    b.Property<string>("LongCode");

                    b.Property<string>("Name");

                    b.Property<string>("ParentCode");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("AreaId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Level");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Liaoxin.Model.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AddMeNeedChecked");

                    b.Property<bool>("AppOpenWhileSound");

                    b.Property<string>("AreaCode");

                    b.Property<string>("CharacterSignature");

                    b.Property<decimal>("Coin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("CoinPassword");

                    b.Property<string>("Cover");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int?>("CurrentDeviceId");

                    b.Property<string>("Email");

                    b.Property<int>("FontSize");

                    b.Property<bool>("HandFree");

                    b.Property<string>("HuanXinId");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsFreeze");

                    b.Property<string>("LiaoxinNumber")
                        .HasMaxLength(20);

                    b.Property<bool>("NewMessageNotication");

                    b.Property<string>("NickName")
                        .HasMaxLength(20);

                    b.Property<bool>("OpenWhileShake");

                    b.Property<string>("Password");

                    b.Property<int>("ShowFriendCircle");

                    b.Property<bool>("ShowMessageNotication");

                    b.Property<string>("Telephone");

                    b.Property<bool>("UpadteMind");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<bool>("VideoMessageNotication");

                    b.Property<bool>("WifiVideoPlay");

                    b.HasKey("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LiaoxinNumber")
                        .IsUnique();

                    b.HasIndex("Telephone");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Liaoxin.Model.ClientAdd", b =>
                {
                    b.Property<int>("ClientAddId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ClientAddId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ClientAdds");
                });

            modelBuilder.Entity("Liaoxin.Model.ClientAddDetail", b =>
                {
                    b.Property<int>("ClientAddDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddRemark");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ClientAddDetailId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ClientAddDetails");
                });

            modelBuilder.Entity("Liaoxin.Model.ClientEquipment", b =>
                {
                    b.Property<int>("ClientEquipmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ClientEquipmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ClientEquipments");
                });

            modelBuilder.Entity("Liaoxin.Model.ClientRelation", b =>
                {
                    b.Property<int>("ClientRelationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("RelationType");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ClientRelationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ClientRelations");
                });

            modelBuilder.Entity("Liaoxin.Model.ClientRelationDetail", b =>
                {
                    b.Property<int>("ClientRelationDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddSource");

                    b.Property<int>("ClientId");

                    b.Property<int>("ClientRelationId");

                    b.Property<string>("ClientRemark");

                    b.Property<int?>("ClientTagId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("MutipleGroup");

                    b.Property<bool>("NotLetSee");

                    b.Property<bool>("NotSee");

                    b.Property<bool>("SpecialAttention");

                    b.Property<string>("Telephone");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ClientRelationDetailId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientRelationId");

                    b.HasIndex("ClientTagId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ClientRelationDetails");
                });

            modelBuilder.Entity("Liaoxin.Model.ClientTag", b =>
                {
                    b.Property<int>("ClientTagId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ClientTagId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ClientTags");
                });

            modelBuilder.Entity("Liaoxin.Model.CoinLog", b =>
                {
                    b.Property<int>("CoinLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AboutId");

                    b.Property<decimal>("Coin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal>("FCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("FlowCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("FlowFCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<string>("Remark");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("CoinLogId");

                    b.HasIndex("AboutId");

                    b.HasIndex("CoinLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Type");

                    b.HasIndex("UpdateTime");

                    b.ToTable("CoinLogs");
                });

            modelBuilder.Entity("Liaoxin.Model.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllBlock");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("HuanxinGroupId");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name");

                    b.Property<string>("Notice");

                    b.Property<bool>("SureConfirmInvite");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("GroupId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Liaoxin.Model.GroupClient", b =>
                {
                    b.Property<int>("GroupClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundImg");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("MyNickName");

                    b.Property<bool>("SaveMyGroup");

                    b.Property<bool>("SetNoDisturb");

                    b.Property<bool>("SetTop");

                    b.Property<bool>("ShowOtherNickName");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("GroupClientId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("GroupId");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("GroupClients");
                });

            modelBuilder.Entity("Liaoxin.Model.GroupManager", b =>
                {
                    b.Property<int>("GroupManagerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsEnable");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("GroupManagerId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("GroupId");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("GroupManagers");
                });

            modelBuilder.Entity("Liaoxin.Model.MerchantsBank", b =>
                {
                    b.Property<int>("MerchantsBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Aisle");

                    b.Property<string>("BankUserName");

                    b.Property<int>("BannerAffixId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<int>("IndexSort");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsUseful");

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("MerchantsBankShowType");

                    b.Property<string>("MerchantsKey");

                    b.Property<string>("MerchantsNumber");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name");

                    b.Property<int?>("ScanAffixId");

                    b.Property<int>("ThirdPayMerchantsType");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("MerchantsBankId");

                    b.HasIndex("BannerAffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("ScanAffixId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("MerchantsBanks");
                });

            modelBuilder.Entity("Liaoxin.Model.NotReportPlayer", b =>
                {
                    b.Property<int>("NotReportPlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("NotReportPlayerId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("NotReportPlayers");
                });

            modelBuilder.Entity("Liaoxin.Model.PictureNews", b =>
                {
                    b.Property<int>("PictureNewsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffixId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("SortIndex");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Url");

                    b.HasKey("PictureNewsId");

                    b.HasIndex("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("PictureNewses");
                });

            modelBuilder.Entity("Liaoxin.Model.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime?>("Birthday");

                    b.Property<bool>("CanWithdraw");

                    b.Property<int>("ClientId");

                    b.Property<decimal>("Coin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("CoinPassword");

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal?>("DailyWageRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("DividendRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("FCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("GiftMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsChangePassword");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsFreeze");

                    b.Property<decimal>("LastBetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<int?>("ParentPlayerId");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("QQ");

                    b.Property<decimal>("Rebate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("RebateMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("RechargeMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("ReportDate");

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("WeChat");

                    b.Property<decimal>("WinMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("WithdrawMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("PlayerId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DailyWageRate");

                    b.HasIndex("DividendRate");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentPlayerId");

                    b.HasIndex("Rebate");

                    b.HasIndex("ReportDate");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Liaoxin.Model.PlayerBank", b =>
                {
                    b.Property<int>("PlayerBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("PayeeName");

                    b.Property<int>("PlayerId");

                    b.Property<int>("SystemBankId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlayerBankId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SystemBankId");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("CardNumber", "PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerBanks");
                });

            modelBuilder.Entity("Liaoxin.Model.PlayerLoginLog", b =>
                {
                    b.Property<int>("PlayerLoginLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("IP");

                    b.Property<bool>("IsApp");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlayerLoginLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("PlayerLoginLogs");
                });

            modelBuilder.Entity("Liaoxin.Model.PlayerOperateLog", b =>
                {
                    b.Property<int>("PlayerOperateLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Message");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlayerOperateLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("PlayerOperateLogs");
                });

            modelBuilder.Entity("Liaoxin.Model.Recharge", b =>
                {
                    b.Property<int>("RechargeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int?>("MerchantsBankId");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(20);

                    b.Property<int>("PlayerId");

                    b.Property<string>("Remark");

                    b.Property<int>("State");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RechargeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("MerchantsBankId");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Recharges");
                });

            modelBuilder.Entity("Liaoxin.Model.ReportCache", b =>
                {
                    b.Property<int>("ReportCacheId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("QueryTime");

                    b.Property<string>("Type")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("ReportCacheId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("Value");

                    b.ToTable("ReportCaches");
                });

            modelBuilder.Entity("Liaoxin.Model.SystemBank", b =>
                {
                    b.Property<int>("SystemBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffixId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("SortIndex");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("SystemBankId");

                    b.HasIndex("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("SystemBanks");
                });

            modelBuilder.Entity("Liaoxin.Model.SystemConfig", b =>
                {
                    b.Property<int>("SystemConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Value");

                    b.HasKey("SystemConfigId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("Liaoxin.Model.UserOperateLog", b =>
                {
                    b.Property<int>("UserOperateLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Message");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<int>("UserInfoId");

                    b.HasKey("UserOperateLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserOperateLogs");
                });

            modelBuilder.Entity("Liaoxin.Model.Withdraw", b =>
                {
                    b.Property<int>("WithdrawId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(20);

                    b.Property<int>("PlayerBankId");

                    b.Property<string>("Remark");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("WithdrawId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.HasIndex("PlayerBankId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Withdraws");
                });

            modelBuilder.Entity("Zzb.EF.Affix", b =>
                {
                    b.Property<int>("AffixId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Path");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Affixs");
                });

            modelBuilder.Entity("Zzb.EF.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("NavId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PermissionId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Zzb.EF.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("RoleId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Zzb.EF.RolePermission", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Zzb.EF.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("UserInfoId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Zzb.EF.UserInfoPermission", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("UserInfoId");

                    b.HasKey("PermissionId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserInfoPermissions");
                });

            modelBuilder.Entity("Zzb.EF.UserInfoRole", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserInfoId");

                    b.HasKey("RoleId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserInfoRoles");
                });

            modelBuilder.Entity("Liaoxin.Model.ActivityAnnouncement", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Affix")
                        .WithMany()
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.ClientAdd", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.ClientAddDetail", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.ClientEquipment", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.ClientRelation", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.ClientRelationDetail", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Liaoxin.Model.ClientRelation", "ClientRelation")
                        .WithMany("ClientRelationDetail")
                        .HasForeignKey("ClientRelationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Liaoxin.Model.ClientTag", "ClientTag")
                        .WithMany()
                        .HasForeignKey("ClientTagId");
                });

            modelBuilder.Entity("Liaoxin.Model.CoinLog", b =>
                {
                    b.HasOne("Liaoxin.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.Group", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.GroupClient", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Liaoxin.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.GroupManager", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Liaoxin.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.MerchantsBank", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "BannerAffix")
                        .WithMany()
                        .HasForeignKey("BannerAffixId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.Affix", "ScanAffix")
                        .WithMany()
                        .HasForeignKey("ScanAffixId");
                });

            modelBuilder.Entity("Liaoxin.Model.NotReportPlayer", b =>
                {
                    b.HasOne("Liaoxin.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.PictureNews", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Affix")
                        .WithMany()
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.Player", b =>
                {
                    b.HasOne("Liaoxin.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Liaoxin.Model.Player", "ParentPlayer")
                        .WithMany("Players")
                        .HasForeignKey("ParentPlayerId");
                });

            modelBuilder.Entity("Liaoxin.Model.PlayerBank", b =>
                {
                    b.HasOne("Liaoxin.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Liaoxin.Model.SystemBank", "SystemBank")
                        .WithMany()
                        .HasForeignKey("SystemBankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.PlayerLoginLog", b =>
                {
                    b.HasOne("Liaoxin.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.PlayerOperateLog", b =>
                {
                    b.HasOne("Liaoxin.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.Recharge", b =>
                {
                    b.HasOne("Liaoxin.Model.MerchantsBank", "MerchantsBank")
                        .WithMany()
                        .HasForeignKey("MerchantsBankId");

                    b.HasOne("Liaoxin.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.SystemBank", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Affix")
                        .WithMany()
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.UserOperateLog", b =>
                {
                    b.HasOne("Zzb.EF.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Liaoxin.Model.Withdraw", b =>
                {
                    b.HasOne("Liaoxin.Model.PlayerBank", "PlayerBank")
                        .WithMany()
                        .HasForeignKey("PlayerBankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zzb.EF.RolePermission", b =>
                {
                    b.HasOne("Zzb.EF.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zzb.EF.UserInfoPermission", b =>
                {
                    b.HasOne("Zzb.EF.Permission", "Permission")
                        .WithMany("UserInfoPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.UserInfo", "UserInfo")
                        .WithMany("UserInfoPermissions")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zzb.EF.UserInfoRole", b =>
                {
                    b.HasOne("Zzb.EF.Role", "Role")
                        .WithMany("UserInfoRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.UserInfo", "UserInfo")
                        .WithMany("UserInfoRoles")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
