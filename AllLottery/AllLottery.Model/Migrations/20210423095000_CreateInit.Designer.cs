// <auto-generated />
using System;
using AllLottery.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AllLottery.Model.Migrations
{
    [DbContext(typeof(LotteryContext))]
    [Migration("20210423095000_CreateInit")]
    partial class CreateInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AllLottery.Model.ActivityAnnouncement", b =>
                {
                    b.Property<int>("ActivityAnnouncementId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffixId");

                    b.Property<DateTime>("BeginTime");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("ActivityAnnouncementId");

                    b.HasIndex("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ActivityAnnouncements");
                });

            modelBuilder.Entity("AllLottery.Model.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<DateTime>("ShowOpenTime");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("AllLottery.Model.Bet", b =>
                {
                    b.Property<int>("BetId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BetCount");

                    b.Property<int>("BetModeId");

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("BetNo");

                    b.Property<DateTime>("BetTime");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("CreditRemark")
                        .HasMaxLength(50);

                    b.Property<bool>("IsEnable");

                    b.Property<int?>("LotteryDataId");

                    b.Property<string>("LotteryIssuseNo")
                        .HasMaxLength(20);

                    b.Property<int>("LotteryPlayDetailId");

                    b.Property<string>("Order")
                        .HasMaxLength(100);

                    b.Property<int>("PlayerId");

                    b.Property<int>("Status");

                    b.Property<int>("Times");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("WinBetCount");

                    b.Property<decimal>("WinMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("BetId");

                    b.HasIndex("BetModeId");

                    b.HasIndex("BetTime");

                    b.HasIndex("CreateTime");

                    b.HasIndex("CreditRemark");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LotteryDataId");

                    b.HasIndex("LotteryIssuseNo");

                    b.HasIndex("LotteryPlayDetailId");

                    b.HasIndex("Order");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("WinMoney");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("AllLottery.Model.BetMode", b =>
                {
                    b.Property<int>("BetModeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("Index");

                    b.Property<bool>("IsCredit");

                    b.Property<bool>("IsEnable");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("BetModeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("BetModes");
                });

            modelBuilder.Entity("AllLottery.Model.ChasingOrder", b =>
                {
                    b.Property<int>("ChasingOrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BetModeId");

                    b.Property<string>("BetNo");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsWinStop");

                    b.Property<int>("LotteryPlayDetailId");

                    b.Property<string>("Order")
                        .HasMaxLength(100);

                    b.Property<int>("PlayerId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ChasingOrderId");

                    b.HasIndex("BetModeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LotteryPlayDetailId");

                    b.HasIndex("Order");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ChasingOrders");
                });

            modelBuilder.Entity("AllLottery.Model.ChasingOrderDetail", b =>
                {
                    b.Property<int>("ChasingOrderDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BetId");

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("ChasingOrderId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("Index");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Number");

                    b.Property<int>("Times");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ChasingOrderDetailId");

                    b.HasIndex("BetId");

                    b.HasIndex("ChasingOrderId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ChasingOrderDetails");
                });

            modelBuilder.Entity("AllLottery.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AddMeNeedChecked");

                    b.Property<string>("CharacterSignature");

                    b.Property<int>("City");

                    b.Property<decimal>("Coin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("CoinPassword");

                    b.Property<int>("Country");

                    b.Property<string>("Cover");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("CurrentDeviceId");

                    b.Property<string>("Email");

                    b.Property<string>("HuanXinId");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("LiaoxinNumber")
                        .HasMaxLength(20);

                    b.Property<string>("NickName")
                        .HasMaxLength(20);

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<int>("Province");

                    b.Property<int>("ShowFriendCircle");

                    b.Property<bool>("UpadteMind");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LiaoxinNumber")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AllLottery.Model.ClientBlack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("FromClientId");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("ToClientId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ClientBlacks");
                });

            modelBuilder.Entity("AllLottery.Model.CoinLog", b =>
                {
                    b.Property<int>("CoinLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AboutId");

                    b.Property<decimal>("Coin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal>("FCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("FlowCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("FlowFCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<string>("Remark");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("CoinLogId");

                    b.HasIndex("AboutId");

                    b.HasIndex("CoinLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Type");

                    b.HasIndex("UpdateTime");

                    b.ToTable("CoinLogs");
                });

            modelBuilder.Entity("AllLottery.Model.DailyWage", b =>
                {
                    b.Property<int>("DailyWageId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("MenCount");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("DailyWageId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("DailyWages");
                });

            modelBuilder.Entity("AllLottery.Model.DailyWageLog", b =>
                {
                    b.Property<int>("DailyWageLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BetMen");

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CalDate");

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal>("DailyMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("DailyWageLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("DailyWageLogs");
                });

            modelBuilder.Entity("AllLottery.Model.DividendDate", b =>
                {
                    b.Property<int>("DividendDateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsCal");

                    b.Property<bool>("IsEnable");

                    b.Property<DateTime>("SettleTime");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DividendDateId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("SettleTime")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("DividendDates");
                });

            modelBuilder.Entity("AllLottery.Model.DividendLog", b =>
                {
                    b.Property<int>("DividendLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BetMen");

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CalBeginDate");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("DividendDateId");

                    b.Property<decimal>("DividendMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsEnable");

                    b.Property<decimal>("LostMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("PlayerId");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("DividendLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DividendDateId");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("DividendLogs");
                });

            modelBuilder.Entity("AllLottery.Model.DividendSetting", b =>
                {
                    b.Property<int>("DividendSettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<decimal>("LostMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("MenCount");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("DividendSettingId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("DividendSettings");
                });

            modelBuilder.Entity("AllLottery.Model.GiftEvent", b =>
                {
                    b.Property<int>("GiftEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginTime");

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsEnable");

                    b.Property<decimal>("MaxMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("MinMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("ReceivingType");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("ReturnRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("Rule");

                    b.Property<string>("TestRow");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("GiftEventId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("GiftEvents");
                });

            modelBuilder.Entity("AllLottery.Model.GiftReceive", b =>
                {
                    b.Property<int>("GiftReceiveId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal>("GiftMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("GiftReceiveId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("GiftReceives");
                });

            modelBuilder.Entity("AllLottery.Model.LotteryClassify", b =>
                {
                    b.Property<int>("LotteryClassifyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("LotteryClassifyId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("LotteryClassifies");
                });

            modelBuilder.Entity("AllLottery.Model.LotteryData", b =>
                {
                    b.Property<int>("LotteryDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Data")
                        .HasMaxLength(200);

                    b.Property<bool>("IsEnable");

                    b.Property<int>("LotteryTypeId");

                    b.Property<string>("Number")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Time");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("LotteryDataId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Data");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LotteryDataId");

                    b.HasIndex("Time");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("LotteryTypeId", "Number")
                        .IsUnique();

                    b.ToTable("LotteryDatas");
                });

            modelBuilder.Entity("AllLottery.Model.LotteryOpenTime", b =>
                {
                    b.Property<int>("LotteryOpenTimeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsTomorrow");

                    b.Property<int>("LotteryTypeId");

                    b.Property<int>("OpenNumber");

                    b.Property<TimeSpan>("OpenTime");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("LotteryOpenTimeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LotteryTypeId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("LotteryOpenTimes");
                });

            modelBuilder.Entity("AllLottery.Model.LotteryPlayDetail", b =>
                {
                    b.Property<int>("LotteryPlayDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("LotteryPlayTypeId");

                    b.Property<int?>("MaxBetCount");

                    b.Property<decimal>("MaxBetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("MaxOdds")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("MinOdds")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name");

                    b.Property<string>("ReflectClass");

                    b.Property<int>("SortIndex");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("LotteryPlayDetailId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LotteryPlayTypeId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("LotteryPlayDetails");
                });

            modelBuilder.Entity("AllLottery.Model.LotteryPlayType", b =>
                {
                    b.Property<int>("LotteryPlayTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("LotteryTypeId");

                    b.Property<string>("Name");

                    b.Property<int>("SortIndex");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("LotteryPlayTypeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LotteryTypeId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("LotteryPlayTypes");
                });

            modelBuilder.Entity("AllLottery.Model.LotteryType", b =>
                {
                    b.Property<int>("LotteryTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("CalType");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("DateFormat");

                    b.Property<string>("Description");

                    b.Property<int>("IconId");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsHot");

                    b.Property<bool>("IsStop");

                    b.Property<int>("LotteryClassifyId");

                    b.Property<string>("Name");

                    b.Property<int>("NumberLength");

                    b.Property<DateTime>("ReportDate");

                    b.Property<TimeSpan>("RiskTime");

                    b.Property<int>("SortIndex");

                    b.Property<string>("SpiderName");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("WinMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("LotteryTypeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IconId");

                    b.HasIndex("IsEnable");

                    b.HasIndex("LotteryClassifyId");

                    b.HasIndex("LotteryTypeId");

                    b.HasIndex("ReportDate");

                    b.HasIndex("UpdateTime");

                    b.ToTable("LotteryTypes");
                });

            modelBuilder.Entity("AllLottery.Model.MerchantsBank", b =>
                {
                    b.Property<int>("MerchantsBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Aisle");

                    b.Property<string>("BankUserName");

                    b.Property<int>("BannerAffixId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<int>("IndexSort");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsUseful");

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("MerchantsBankShowType");

                    b.Property<string>("MerchantsKey");

                    b.Property<string>("MerchantsNumber");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name");

                    b.Property<int?>("ScanAffixId");

                    b.Property<int>("ThirdPayMerchantsType");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("MerchantsBankId");

                    b.HasIndex("BannerAffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("ScanAffixId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("MerchantsBanks");
                });

            modelBuilder.Entity("AllLottery.Model.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<int>("InfoId");

                    b.Property<int>("InfoType");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsLook");

                    b.Property<bool>("IsSend");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<byte[]>("Version");

                    b.HasKey("MessageId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("IsLook");

                    b.HasIndex("IsSend");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("AllLottery.Model.NotReportPlayer", b =>
                {
                    b.Property<int>("NotReportPlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("NotReportPlayerId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("NotReportPlayers");
                });

            modelBuilder.Entity("AllLottery.Model.PictureNews", b =>
                {
                    b.Property<int>("PictureNewsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffixId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("SortIndex");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Url");

                    b.HasKey("PictureNewsId");

                    b.HasIndex("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("PictureNewses");
                });

            modelBuilder.Entity("AllLottery.Model.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffixId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name");

                    b.Property<int>("SortIndex");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Value");

                    b.HasKey("PlatformId");

                    b.HasIndex("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("AllLottery.Model.PlatformMoneyLog", b =>
                {
                    b.Property<int>("PlatformMoneyLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal>("FlowMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlatformId");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlatformMoneyLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("PlatformMoneyLogs");
                });

            modelBuilder.Entity("AllLottery.Model.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime?>("Birthday");

                    b.Property<bool>("CanWithdraw");

                    b.Property<decimal>("Coin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("CoinPassword");

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal?>("DailyWageRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("DividendRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("FCoin")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("GiftMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsChangePassword");

                    b.Property<bool>("IsEnable");

                    b.Property<bool>("IsFreeze");

                    b.Property<decimal>("LastBetMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<int?>("ParentPlayerId");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("QQ");

                    b.Property<decimal>("Rebate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("RebateMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("RechargeMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("ReportDate");

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("WeChat");

                    b.Property<decimal>("WinMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("WithdrawMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("PlayerId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("DailyWageRate");

                    b.HasIndex("DividendRate");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentPlayerId");

                    b.HasIndex("Rebate");

                    b.HasIndex("ReportDate");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("AllLottery.Model.PlayerBank", b =>
                {
                    b.Property<int>("PlayerBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("PayeeName");

                    b.Property<int>("PlayerId");

                    b.Property<int>("SystemBankId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlayerBankId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SystemBankId");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("CardNumber", "PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerBanks");
                });

            modelBuilder.Entity("AllLottery.Model.PlayerLoginLog", b =>
                {
                    b.Property<int>("PlayerLoginLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("IP");

                    b.Property<bool>("IsApp");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlayerLoginLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("PlayerLoginLogs");
                });

            modelBuilder.Entity("AllLottery.Model.PlayerLotteryType", b =>
                {
                    b.Property<int>("PlayerLotteryTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("LotteryTypeId");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlayerLotteryTypeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("LotteryTypeId", "PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerLotteryTypes");
                });

            modelBuilder.Entity("AllLottery.Model.PlayerOperateLog", b =>
                {
                    b.Property<int>("PlayerOperateLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Message");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PlayerOperateLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("PlayerOperateLogs");
                });

            modelBuilder.Entity("AllLottery.Model.ProxyRegister", b =>
                {
                    b.Property<int>("ProxyRegisterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Number")
                        .HasMaxLength(20);

                    b.Property<int>("PlayerId");

                    b.Property<decimal>("Rebate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Remark");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<int>("UseCount");

                    b.HasKey("ProxyRegisterId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("ProxyRegisters");
                });

            modelBuilder.Entity("AllLottery.Model.RebateLog", b =>
                {
                    b.Property<int>("RebateLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BetId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<decimal>("DiffRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<decimal>("RebateMoney")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("RebateLogId");

                    b.HasIndex("BetId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RebateLogId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("RebateLogs");
                });

            modelBuilder.Entity("AllLottery.Model.Recharge", b =>
                {
                    b.Property<int>("RechargeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int?>("MerchantsBankId");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(20);

                    b.Property<int>("PlayerId");

                    b.Property<string>("Remark");

                    b.Property<int>("State");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RechargeId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("MerchantsBankId");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Recharges");
                });

            modelBuilder.Entity("AllLottery.Model.ReportCache", b =>
                {
                    b.Property<int>("ReportCacheId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("QueryTime");

                    b.Property<string>("Type")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("ReportCacheId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("Value");

                    b.ToTable("ReportCaches");
                });

            modelBuilder.Entity("AllLottery.Model.SoftwareExpired", b =>
                {
                    b.Property<int>("SoftwareExpiredId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("Expired");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("PlayerId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("SoftwareExpiredId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UpdateTime");

                    b.ToTable("SoftwareExpireds");
                });

            modelBuilder.Entity("AllLottery.Model.SystemBank", b =>
                {
                    b.Property<int>("SystemBankId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AffixId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("SortIndex");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("SystemBankId");

                    b.HasIndex("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("SystemBanks");
                });

            modelBuilder.Entity("AllLottery.Model.SystemConfig", b =>
                {
                    b.Property<int>("SystemConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Value");

                    b.HasKey("SystemConfigId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("AllLottery.Model.UserOperateLog", b =>
                {
                    b.Property<int>("UserOperateLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Message");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<int>("UserInfoId");

                    b.HasKey("UserOperateLogId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserOperateLogs");
                });

            modelBuilder.Entity("AllLottery.Model.Withdraw", b =>
                {
                    b.Property<int>("WithdrawId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(20);

                    b.Property<int>("PlayerBankId");

                    b.Property<string>("Remark");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("WithdrawId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.HasIndex("PlayerBankId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Withdraws");
                });

            modelBuilder.Entity("Zzb.EF.Affix", b =>
                {
                    b.Property<int>("AffixId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Path");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("AffixId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Affixs");
                });

            modelBuilder.Entity("Zzb.EF.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("NavId");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("PermissionId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("UpdateTime");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Zzb.EF.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("RoleId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Zzb.EF.RolePermission", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Zzb.EF.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<DateTime>("UpdateTime");

                    b.HasKey("UserInfoId");

                    b.HasIndex("CreateTime");

                    b.HasIndex("IsEnable");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdateTime");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Zzb.EF.UserInfoPermission", b =>
                {
                    b.Property<int>("PermissionId");

                    b.Property<int>("UserInfoId");

                    b.HasKey("PermissionId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserInfoPermissions");
                });

            modelBuilder.Entity("Zzb.EF.UserInfoRole", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserInfoId");

                    b.HasKey("RoleId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("UserInfoRoles");
                });

            modelBuilder.Entity("AllLottery.Model.ActivityAnnouncement", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Affix")
                        .WithMany()
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.Bet", b =>
                {
                    b.HasOne("AllLottery.Model.BetMode", "BetMode")
                        .WithMany()
                        .HasForeignKey("BetModeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.LotteryData", "LotteryData")
                        .WithMany()
                        .HasForeignKey("LotteryDataId");

                    b.HasOne("AllLottery.Model.LotteryPlayDetail", "LotteryPlayDetail")
                        .WithMany()
                        .HasForeignKey("LotteryPlayDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.ChasingOrder", b =>
                {
                    b.HasOne("AllLottery.Model.BetMode", "BetMode")
                        .WithMany()
                        .HasForeignKey("BetModeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.LotteryPlayDetail", "LotteryPlayDetail")
                        .WithMany()
                        .HasForeignKey("LotteryPlayDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.ChasingOrderDetail", b =>
                {
                    b.HasOne("AllLottery.Model.Bet", "Bet")
                        .WithMany()
                        .HasForeignKey("BetId");

                    b.HasOne("AllLottery.Model.ChasingOrder", "ChasingOrder")
                        .WithMany("ChasingOrderDetails")
                        .HasForeignKey("ChasingOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.CoinLog", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.DailyWageLog", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.DividendLog", b =>
                {
                    b.HasOne("AllLottery.Model.DividendDate", "DividendDate")
                        .WithMany()
                        .HasForeignKey("DividendDateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.GiftReceive", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.LotteryData", b =>
                {
                    b.HasOne("AllLottery.Model.LotteryType", "LotteryType")
                        .WithMany()
                        .HasForeignKey("LotteryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.LotteryOpenTime", b =>
                {
                    b.HasOne("AllLottery.Model.LotteryType", "LotteryType")
                        .WithMany("LotteryOpenTimes")
                        .HasForeignKey("LotteryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.LotteryPlayDetail", b =>
                {
                    b.HasOne("AllLottery.Model.LotteryPlayType", "LotteryPlayType")
                        .WithMany("LotteryPlayDetails")
                        .HasForeignKey("LotteryPlayTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.LotteryPlayType", b =>
                {
                    b.HasOne("AllLottery.Model.LotteryType", "LotteryType")
                        .WithMany("LotteryPlayTypes")
                        .HasForeignKey("LotteryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.LotteryType", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.LotteryClassify", "LotteryClassify")
                        .WithMany("LotteryTypes")
                        .HasForeignKey("LotteryClassifyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.MerchantsBank", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "BannerAffix")
                        .WithMany()
                        .HasForeignKey("BannerAffixId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.Affix", "ScanAffix")
                        .WithMany()
                        .HasForeignKey("ScanAffixId");
                });

            modelBuilder.Entity("AllLottery.Model.NotReportPlayer", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.PictureNews", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Affix")
                        .WithMany()
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.Platform", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Affix")
                        .WithMany()
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.PlatformMoneyLog", b =>
                {
                    b.HasOne("AllLottery.Model.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.Player", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "ParentPlayer")
                        .WithMany("Players")
                        .HasForeignKey("ParentPlayerId");
                });

            modelBuilder.Entity("AllLottery.Model.PlayerBank", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.SystemBank", "SystemBank")
                        .WithMany()
                        .HasForeignKey("SystemBankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.PlayerLoginLog", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.PlayerLotteryType", b =>
                {
                    b.HasOne("AllLottery.Model.LotteryType", "LotteryType")
                        .WithMany()
                        .HasForeignKey("LotteryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.PlayerOperateLog", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.ProxyRegister", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.RebateLog", b =>
                {
                    b.HasOne("AllLottery.Model.Bet", "Bet")
                        .WithMany()
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.Recharge", b =>
                {
                    b.HasOne("AllLottery.Model.MerchantsBank", "MerchantsBank")
                        .WithMany()
                        .HasForeignKey("MerchantsBankId");

                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.SoftwareExpired", b =>
                {
                    b.HasOne("AllLottery.Model.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.SystemBank", b =>
                {
                    b.HasOne("Zzb.EF.Affix", "Affix")
                        .WithMany()
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.UserOperateLog", b =>
                {
                    b.HasOne("Zzb.EF.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllLottery.Model.Withdraw", b =>
                {
                    b.HasOne("AllLottery.Model.PlayerBank", "PlayerBank")
                        .WithMany()
                        .HasForeignKey("PlayerBankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zzb.EF.RolePermission", b =>
                {
                    b.HasOne("Zzb.EF.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zzb.EF.UserInfoPermission", b =>
                {
                    b.HasOne("Zzb.EF.Permission", "Permission")
                        .WithMany("UserInfoPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.UserInfo", "UserInfo")
                        .WithMany("UserInfoPermissions")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Zzb.EF.UserInfoRole", b =>
                {
                    b.HasOne("Zzb.EF.Role", "Role")
                        .WithMany("UserInfoRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zzb.EF.UserInfo", "UserInfo")
                        .WithMany("UserInfoRoles")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
